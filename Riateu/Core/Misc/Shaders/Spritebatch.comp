#version 450

struct ComputeData 
{
    vec2 position;
    vec2 scale;
    vec2 origin;
    vec2 uv[4];
    vec2 dimension;
    float rotation;
    float depth;
    vec4 color;
};

struct PositionTextureColorVertex 
{
    vec4 position;
    vec2 tex_coords;
    vec4 color;
};

layout (std430, set = 0, binding = 0) readonly buffer inBuffer 
{
    ComputeData computeData[];
};

layout (std430, set = 1, binding = 0) writeonly buffer outBuffer 
{
    PositionTextureColorVertex vertexData[];
};


layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
void main() 
{
    uint n = gl_GlobalInvocationID.x;
    ComputeData compData = computeData[n];

    mat4 origin = mat4(
        1, 0, 0, 0,
        0, 1, 0, 0,
        0, 0, 1, 0,
        -compData.origin.x, -compData.origin.y, compData.depth, 1.
    );


    float val1 = cos(compData.rotation);
    float val2 = sin(compData.rotation);

    float x = compData.origin.x * (1. - val1) + compData.origin.y * val2;
    float y = compData.origin.y * (1. - val1) - compData.origin.x * val2;

    mat4 rotation = mat4(
        val1, val2, 0., 0.,
        -val2, val1, 0., 0.,
        x, y, 1., 0.,
        0., 0., 0., 1.
    );

    mat4 transform = origin * rotation;

    float width = compData.dimension.x * compData.scale.x;
    float height = compData.dimension.y * compData.scale.y;

    vec4 topLeft = vec4(compData.position.x, compData.position.y, compData.depth, 1.);
    vec4 topRight= vec4(compData.position.x + width, compData.position.y, compData.depth, 1.);
    vec4 bottomLeft = vec4(compData.position.x, compData.position.y + height, compData.depth, 1.);
    vec4 bottomRight = vec4(compData.position.x + width, compData.position.y + height, compData.depth, 1.);

    vertexData[n * 4u].position = vec4(
        (topLeft.x * transform[0][0]) + (topLeft.y * transform[1][0]) + transform[3][0],
        (topLeft.x * transform[0][1]) + (topLeft.y * transform[1][1]) + transform[3][1],
        (topLeft.x * transform[0][2]) + (topLeft.y * transform[1][2]) + transform[3][2],
        (topLeft.x * transform[0][3]) + (topLeft.y * transform[1][3]) + transform[3][3]
    );
    vertexData[n * 4u + 1u].position = vec4(
        (topRight.x * transform[0][0]) + (topRight.y * transform[1][0]) + transform[3][0],
        (topRight.x * transform[0][1]) + (topRight.y * transform[1][1]) + transform[3][1],
        (topRight.x * transform[0][2]) + (topRight.y * transform[1][2]) + transform[3][2],
        (topRight.x * transform[0][3]) + (topRight.y * transform[1][3]) + transform[3][3]
    );
    vertexData[n * 4u + 2u].position = vec4(
        (bottomLeft.x * transform[0][0]) + (bottomLeft.y * transform[1][0]) + transform[3][0],
        (bottomLeft.x * transform[0][1]) + (bottomLeft.y * transform[1][1]) + transform[3][1],
        (bottomLeft.x * transform[0][2]) + (bottomLeft.y * transform[1][2]) + transform[3][2],
        (bottomLeft.x * transform[0][3]) + (bottomLeft.y * transform[1][3]) + transform[3][3]
    );
    vertexData[n * 4u + 3u].position = vec4(
        (bottomRight.x * transform[0][0]) + (bottomRight.y * transform[1][0]) + transform[3][0],
        (bottomRight.x * transform[0][1]) + (bottomRight.y * transform[1][1]) + transform[3][1],
        (bottomRight.x * transform[0][2]) + (bottomRight.y * transform[1][2]) + transform[3][2],
        (bottomRight.x * transform[0][3]) + (bottomRight.y * transform[1][3]) + transform[3][3]
    );

    vertexData[n * 4u].tex_coords      = compData.uv[0];
    vertexData[n * 4u + 1u].tex_coords = compData.uv[1]; 
    vertexData[n * 4u + 2u].tex_coords = compData.uv[2];
    vertexData[n * 4u + 3u].tex_coords = compData.uv[3];

    vertexData[n * 4u].color = compData.color;
    vertexData[n * 4u + 1u].color = compData.color;
    vertexData[n * 4u + 2u].color = compData.color;
    vertexData[n * 4u + 3u].color = compData.color;
}
